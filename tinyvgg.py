# -*- coding: utf-8 -*-
"""TinyVGG

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y_5e1WvyceszDWmT4jj63VAtXmrn84Yg
"""

import torch
import torch.nn as nn
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Define transformation
transform = transforms.Compose([
    transforms.ToTensor(),
])

# Load dataset and create dataloaders
train_data = datasets.FashionMNIST(root='data', train=True, download=True, transform=transform)
test_data = datasets.FashionMNIST(root='data', train=False, download=True, transform=transform)
train_loader = DataLoader(train_data, batch_size=32, shuffle=True)
test_loader = DataLoader(test_data, batch_size=32, shuffle=False)

# Define Tiny-VGG model
class TinyVGG(nn.Module):
    def __init__(self, input_channels=1, num_classes=10):
        super(TinyVGG, self).__init__()
        self.conv_block_1 = nn.Sequential(
            nn.Conv2d(input_channels, 10, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(10, 10, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )
        self.conv_block_2 = nn.Sequential(
            nn.Conv2d(10, 10, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.Conv2d(10, 10, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(10 * 7 * 7, 128),
            nn.ReLU(),
            nn.Linear(128, num_classes)
        )

    def forward(self, x):
        x = self.conv_block_1(x)
        x = self.conv_block_2(x)
        return self.classifier(x)

# Initialize model, loss, optimizer
model = TinyVGG().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.1)

# Training loop
for epoch in range(10):
    model.train()
    total, correct, loss_sum = 0, 0, 0
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        loss_sum += loss.item()
        _, predicted = torch.max(outputs, 1)
        correct += (predicted == labels).sum().item()
        total += labels.size(0)
    print(f"Epoch [{epoch+1}/10], Loss: {loss_sum/len(train_loader):.4f}, Accuracy: {100 * correct / total:.2f}%")

# Test accuracy
model.eval()
correct, total = 0, 0
with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        correct += (predicted == labels).sum().item()
        total += labels.size(0)
print(f"Test Accuracy: {100 * correct / total:.2f}%")

# Visualize feature maps from conv_block_1
model.eval()
images, labels = next(iter(test_loader))
random_img = images[0].unsqueeze(0).to(device)
with torch.no_grad():
    feature_maps = model.conv_block_1(random_img)

plt.figure(figsize=(12, 6))
plt.subplot(2, 6, 1)
plt.imshow(random_img.squeeze().cpu(), cmap='gray')
plt.title("Original Image")
plt.axis('off')
for i in range(10):
    plt.subplot(2, 6, i + 2)
    plt.imshow(feature_maps[0, i].cpu(), cmap='gray')
    plt.title(f"Feature Map {i+1}")
    plt.axis('off')
plt.tight_layout()
plt.show()